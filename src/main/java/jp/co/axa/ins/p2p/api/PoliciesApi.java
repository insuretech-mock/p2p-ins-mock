/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.co.axa.ins.p2p.api;

import jp.co.axa.ins.p2p.model.Policy;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-07-23T22:35:44.263279+09:00[Asia/Tokyo]")

@Validated
@Api(value = "policies", description = "the policies API")
public interface PoliciesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Change policy information", nickname = "changePolicy", notes = "", tags={ "policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default error sample response") })
    @RequestMapping(value = "/policies/{policyId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> changePolicy(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("policyId") String policyId,@ApiParam(value = "Policy object" ,required=true )  @Valid @RequestBody Policy policy) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "create a new policy", nickname = "createPolicy", notes = "", tags={ "policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default error sample response") })
    @RequestMapping(value = "/policies",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createPolicy(@ApiParam(value = "Policy object" ,required=true )  @Valid @RequestBody Policy policy) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Delete policy", nickname = "deletePolicy", notes = "", tags={ "policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default error sample response") })
    @RequestMapping(value = "/policies/{policyId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePolicy(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("policyId") String policyId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "ger policy information based on the policy ID", nickname = "getPolicy", notes = "", response = Policy.class, tags={ "policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default error sample response", response = Policy.class) })
    @RequestMapping(value = "/policies/{policyId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Policy> getPolicy(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("policyId") String policyId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"productId\" : 6,  \"members\" : [ 5, 5 ],  \"id\" : 0,  \"pooledAmount\" : 1}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
