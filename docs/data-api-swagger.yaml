openapi: 3.0.1
info:
  title: p2p-insurance mock
  description: This is a mock p2p insurance service API
  termsOfService: ''
  contact:
    email: ugnom1121@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: External docs to be added.
  url: ''
servers:
  - url: 'http://localhost:8080'
tags:
  - name: user
    description: end user information
  - name: policy
    description: Policy management
  - name: product catalog
    description: Product catalog information
  - name: premium
    description: Premium management
  - name: claim
    description: Claim management
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /users/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /users/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  '/users/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
  /products/list:
    summary: search products
    get:
      summary: get summary list of product information
      description: ''
      operationId: getProductList
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
      tags:
        - product catalog
  '/products/{productId}':
    summary: get product details
    get:
      summary: ''
      description: ''
      parameters:
        - name: productId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      operationId: getProductInfo
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      tags:
        - product catalog
  /policies:
    summary: Policy management
    post:
      summary: create a new policy
      description: ''
      requestBody:
        description: Policy object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        required: true
      operationId: createPolicy
      responses:
        default:
          description: Default error sample response
      tags:
        - policy
  '/policies/{policyId}':
    get:
      summary: ger policy information based on the policy ID
      description: ''
      parameters:
        - name: policyId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      operationId: getPolicy
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      tags:
        - policy
    put:
      summary: Change policy information
      description: ''
      parameters:
        - name: policyId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Policy object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        required: true
      operationId: changePolicy
      responses:
        default:
          description: Default error sample response
      tags:
        - policy
    delete:
      summary: Delete policy
      description: ''
      parameters:
        - name: policyId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      operationId: deletePolicy
      responses:
        default:
          description: Default error sample response
      tags:
        - policy
components:
  schemas:
    Policy:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        pooledAmount:
          type: integer
          format: int64
        members:
          description: Put userId of the member of the policy
          type: array
          items:
            type: integer
            format: int64
    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/Product'

    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        premium:
          type: integer
          format: int64
        insuranceAmount:
          type: integer
          format: int64
        minNumberInGroup:
          type: integer
          format: int64
        maxNumberInGroup:
          type: integer
          format: int64
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
        premiumPaymentInfo:
          $ref: '#/components/schemas/PremiumPaymentInfo'
        insurancePaymentInfo:
          $ref: '#/components/schemas/InsurancePaymentInfo'
    PremiumPaymentInfo:
      type: object
      properties:
        method:
          type: string
    InsurancePaymentInfo:
      type: object
      properties:
        method:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
